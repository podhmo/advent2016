package def

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// CommitBody commit body
// swagger:model commitBody
type CommitBody struct {

	// body
	// Required: true
	Body *string `json:"body"`

	// Deprecated - Use position parameter instead.
	Line string `json:"line,omitempty"`

	// Line number in the file to comment on. Defaults to null.
	Number string `json:"number,omitempty"`

	// Relative path of the file to comment on.
	Path string `json:"path,omitempty"`

	// Line index in the diff to comment on.
	Position int64 `json:"position,omitempty"`

	// SHA of the commit to comment on.
	// Required: true
	Sha *string `json:"sha"`
}

// Validate validates this commit body
func (m *CommitBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSha(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommitBody) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body); err != nil {
		return err
	}

	return nil
}

func (m *CommitBody) validateSha(formats strfmt.Registry) error {

	if err := validate.Required("sha", "body", m.Sha); err != nil {
		return err
	}

	return nil
}
