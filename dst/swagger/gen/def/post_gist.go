package def

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// PostGist post gist
// swagger:model postGist
type PostGist struct {

	// description
	Description string `json:"description,omitempty"`

	// files
	Files *PostGistFiles `json:"files,omitempty"`

	// public
	Public bool `json:"public,omitempty"`
}

// Validate validates this post gist
func (m *PostGist) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFiles(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostGist) validateFiles(formats strfmt.Registry) error {

	if swag.IsZero(m.Files) { // not required
		return nil
	}

	if m.Files != nil {

		if err := m.Files.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// PostGistFiles post gist files
// swagger:model PostGistFiles
type PostGistFiles struct {

	// file1 txt
	File1Txt *PostGistFilesFile1Txt `json:"file1.txt,omitempty"`
}

// Validate validates this post gist files
func (m *PostGistFiles) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFile1Txt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostGistFiles) validateFile1Txt(formats strfmt.Registry) error {

	if swag.IsZero(m.File1Txt) { // not required
		return nil
	}

	if m.File1Txt != nil {

		if err := m.File1Txt.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// PostGistFilesFile1Txt post gist files file1 txt
// swagger:model PostGistFilesFile1Txt
type PostGistFilesFile1Txt struct {

	// content
	Content string `json:"content,omitempty"`
}

// Validate validates this post gist files file1 txt
func (m *PostGistFilesFile1Txt) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
