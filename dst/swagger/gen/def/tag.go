package def

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// Tag tag
// swagger:model tag
type Tag struct {

	// message
	Message string `json:"message,omitempty"`

	// object
	Object *TagObject `json:"object,omitempty"`

	// sha
	Sha string `json:"sha,omitempty"`

	// tag
	Tag string `json:"tag,omitempty"`

	// tagger
	Tagger *TagTagger `json:"tagger,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this tag
func (m *Tag) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObject(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTagger(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Tag) validateObject(formats strfmt.Registry) error {

	if swag.IsZero(m.Object) { // not required
		return nil
	}

	if m.Object != nil {

		if err := m.Object.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Tag) validateTagger(formats strfmt.Registry) error {

	if swag.IsZero(m.Tagger) { // not required
		return nil
	}

	if m.Tagger != nil {

		if err := m.Tagger.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// TagObject tag object
// swagger:model TagObject
type TagObject struct {

	// sha
	Sha string `json:"sha,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this tag object
func (m *TagObject) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// TagTagger tag tagger
// swagger:model TagTagger
type TagTagger struct {

	// ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
	Date string `json:"date,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this tag tagger
func (m *TagTagger) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
