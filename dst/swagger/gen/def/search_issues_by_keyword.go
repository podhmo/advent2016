package def

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// SearchIssuesByKeyword search issues by keyword
// swagger:model search-issues-by-keyword
type SearchIssuesByKeyword struct {

	// issues
	Issues []*SearchIssuesByKeywordIssuesItems0 `json:"issues"`
}

// Validate validates this search issues by keyword
func (m *SearchIssuesByKeyword) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIssues(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchIssuesByKeyword) validateIssues(formats strfmt.Registry) error {

	if swag.IsZero(m.Issues) { // not required
		return nil
	}

	for i := 0; i < len(m.Issues); i++ {

		if swag.IsZero(m.Issues[i]) { // not required
			continue
		}

		if m.Issues[i] != nil {

			if err := m.Issues[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// SearchIssuesByKeywordIssuesItems0 search issues by keyword issues items0
// swagger:model SearchIssuesByKeywordIssuesItems0
type SearchIssuesByKeywordIssuesItems0 struct {

	// body
	Body string `json:"body,omitempty"`

	// comments
	Comments int64 `json:"comments,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// labels
	Labels []string `json:"labels"`

	// number
	Number int64 `json:"number,omitempty"`

	// position
	Position int64 `json:"position,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// user
	User string `json:"user,omitempty"`

	// votes
	Votes int64 `json:"votes,omitempty"`
}

// Validate validates this search issues by keyword issues items0
func (m *SearchIssuesByKeywordIssuesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabels(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchIssuesByKeywordIssuesItems0) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	return nil
}
