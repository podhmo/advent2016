package def

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// CreateFile create file
// swagger:model createFile
type CreateFile struct {

	// commit
	Commit *CreateFileCommit `json:"commit,omitempty"`

	// content
	Content *CreateFileContent `json:"content,omitempty"`
}

// Validate validates this create file
func (m *CreateFile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommit(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateContent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateFile) validateCommit(formats strfmt.Registry) error {

	if swag.IsZero(m.Commit) { // not required
		return nil
	}

	if m.Commit != nil {

		if err := m.Commit.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *CreateFile) validateContent(formats strfmt.Registry) error {

	if swag.IsZero(m.Content) { // not required
		return nil
	}

	if m.Content != nil {

		if err := m.Content.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// CreateFileCommit create file commit
// swagger:model CreateFileCommit
type CreateFileCommit struct {

	// author
	Author *CreateFileCommitAuthor `json:"author,omitempty"`

	// committer
	Committer *CreateFileCommitCommitter `json:"committer,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// parents
	Parents []*CreateFileCommitParentsItems0 `json:"parents"`

	// sha
	Sha string `json:"sha,omitempty"`

	// tree
	Tree *CreateFileCommitTree `json:"tree,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this create file commit
func (m *CreateFileCommit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCommitter(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParents(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTree(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateFileCommit) validateAuthor(formats strfmt.Registry) error {

	if swag.IsZero(m.Author) { // not required
		return nil
	}

	if m.Author != nil {

		if err := m.Author.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *CreateFileCommit) validateCommitter(formats strfmt.Registry) error {

	if swag.IsZero(m.Committer) { // not required
		return nil
	}

	if m.Committer != nil {

		if err := m.Committer.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *CreateFileCommit) validateParents(formats strfmt.Registry) error {

	if swag.IsZero(m.Parents) { // not required
		return nil
	}

	for i := 0; i < len(m.Parents); i++ {

		if swag.IsZero(m.Parents[i]) { // not required
			continue
		}

		if m.Parents[i] != nil {

			if err := m.Parents[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *CreateFileCommit) validateTree(formats strfmt.Registry) error {

	if swag.IsZero(m.Tree) { // not required
		return nil
	}

	if m.Tree != nil {

		if err := m.Tree.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// CreateFileCommitAuthor create file commit author
// swagger:model CreateFileCommitAuthor
type CreateFileCommitAuthor struct {

	// date
	Date string `json:"date,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this create file commit author
func (m *CreateFileCommitAuthor) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// CreateFileCommitCommitter create file commit committer
// swagger:model CreateFileCommitCommitter
type CreateFileCommitCommitter struct {

	// date
	Date string `json:"date,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this create file commit committer
func (m *CreateFileCommitCommitter) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// CreateFileCommitParentsItems0 create file commit parents items0
// swagger:model CreateFileCommitParentsItems0
type CreateFileCommitParentsItems0 struct {

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// sha
	Sha string `json:"sha,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this create file commit parents items0
func (m *CreateFileCommitParentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// CreateFileCommitTree create file commit tree
// swagger:model CreateFileCommitTree
type CreateFileCommitTree struct {

	// sha
	Sha string `json:"sha,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this create file commit tree
func (m *CreateFileCommitTree) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// CreateFileContent create file content
// swagger:model CreateFileContent
type CreateFileContent struct {

	// links
	Links *CreateFileContentLinks `json:"_links,omitempty"`

	// git url
	GitURL string `json:"git_url,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// sha
	Sha string `json:"sha,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this create file content
func (m *CreateFileContent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateFileContent) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {

		if err := m.Links.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// CreateFileContentLinks create file content links
// swagger:model CreateFileContentLinks
type CreateFileContentLinks struct {

	// git
	Git string `json:"git,omitempty"`

	// html
	HTML string `json:"html,omitempty"`

	// self
	Self string `json:"self,omitempty"`
}

// Validate validates this create file content links
func (m *CreateFileContentLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
