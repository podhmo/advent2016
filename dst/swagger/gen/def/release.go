package def

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// Release release
// swagger:model release
type Release struct {

	// assets
	Assets []*ReleaseAssetsItems0 `json:"assets"`

	// assets url
	AssetsURL string `json:"assets_url,omitempty"`

	// author
	Author *ReleaseAuthor `json:"author,omitempty"`

	// body
	Body string `json:"body,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// draft
	Draft bool `json:"draft,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// prerelease
	Prerelease bool `json:"prerelease,omitempty"`

	// published at
	PublishedAt string `json:"published_at,omitempty"`

	// tag name
	TagName string `json:"tag_name,omitempty"`

	// tarball url
	TarballURL string `json:"tarball_url,omitempty"`

	// target commitish
	TargetCommitish string `json:"target_commitish,omitempty"`

	// upload url
	UploadURL string `json:"upload_url,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// zipball url
	ZipballURL string `json:"zipball_url,omitempty"`
}

// Validate validates this release
func (m *Release) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssets(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAuthor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Release) validateAssets(formats strfmt.Registry) error {

	if swag.IsZero(m.Assets) { // not required
		return nil
	}

	for i := 0; i < len(m.Assets); i++ {

		if swag.IsZero(m.Assets[i]) { // not required
			continue
		}

		if m.Assets[i] != nil {

			if err := m.Assets[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Release) validateAuthor(formats strfmt.Registry) error {

	if swag.IsZero(m.Author) { // not required
		return nil
	}

	if m.Author != nil {

		if err := m.Author.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// ReleaseAssetsItems0 release assets items0
// swagger:model ReleaseAssetsItems0
type ReleaseAssetsItems0 struct {

	// content type
	ContentType string `json:"content_type,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// download count
	DownloadCount int64 `json:"download_count,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// uploader
	Uploader *ReleaseAssetsItems0Uploader `json:"uploader,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this release assets items0
func (m *ReleaseAssetsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUploader(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseAssetsItems0) validateUploader(formats strfmt.Registry) error {

	if swag.IsZero(m.Uploader) { // not required
		return nil
	}

	if m.Uploader != nil {

		if err := m.Uploader.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// ReleaseAssetsItems0Uploader release assets items0 uploader
// swagger:model ReleaseAssetsItems0Uploader
type ReleaseAssetsItems0Uploader struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// events url
	EventsURL string `json:"events_url,omitempty"`

	// followers url
	FollowersURL string `json:"followers_url,omitempty"`

	// following url
	FollowingURL string `json:"following_url,omitempty"`

	// gists url
	GistsURL string `json:"gists_url,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// organizations url
	OrganizationsURL string `json:"organizations_url,omitempty"`

	// received events url
	ReceivedEventsURL string `json:"received_events_url,omitempty"`

	// repos url
	ReposURL string `json:"repos_url,omitempty"`

	// site admin
	SiteAdmin bool `json:"site_admin,omitempty"`

	// starred url
	StarredURL string `json:"starred_url,omitempty"`

	// subscriptions url
	SubscriptionsURL string `json:"subscriptions_url,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this release assets items0 uploader
func (m *ReleaseAssetsItems0Uploader) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ReleaseAuthor release author
// swagger:model ReleaseAuthor
type ReleaseAuthor struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// events url
	EventsURL string `json:"events_url,omitempty"`

	// followers url
	FollowersURL string `json:"followers_url,omitempty"`

	// following url
	FollowingURL string `json:"following_url,omitempty"`

	// gists url
	GistsURL string `json:"gists_url,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// organizations url
	OrganizationsURL string `json:"organizations_url,omitempty"`

	// received events url
	ReceivedEventsURL string `json:"received_events_url,omitempty"`

	// repos url
	ReposURL string `json:"repos_url,omitempty"`

	// site admin
	SiteAdmin bool `json:"site_admin,omitempty"`

	// starred url
	StarredURL string `json:"starred_url,omitempty"`

	// subscriptions url
	SubscriptionsURL string `json:"subscriptions_url,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this release author
func (m *ReleaseAuthor) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
