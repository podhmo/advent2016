package def

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// Commits commits
// swagger:model commits
type Commits []*CommitsItems0

// Validate validates this commits
func (m Commits) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {

		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {

			if err := m[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// CommitsItems0 commits items0
// swagger:model CommitsItems0
type CommitsItems0 struct {

	// author
	Author *CommitsItems0Author `json:"author,omitempty"`

	// commit
	Commit *CommitsItems0Commit `json:"commit,omitempty"`

	// committer
	Committer *CommitsItems0Committer `json:"committer,omitempty"`

	// parents
	Parents []*CommitsItems0ParentsItems0 `json:"parents"`

	// sha
	Sha string `json:"sha,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this commits items0
func (m *CommitsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCommit(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCommitter(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParents(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommitsItems0) validateAuthor(formats strfmt.Registry) error {

	if swag.IsZero(m.Author) { // not required
		return nil
	}

	if m.Author != nil {

		if err := m.Author.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *CommitsItems0) validateCommit(formats strfmt.Registry) error {

	if swag.IsZero(m.Commit) { // not required
		return nil
	}

	if m.Commit != nil {

		if err := m.Commit.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *CommitsItems0) validateCommitter(formats strfmt.Registry) error {

	if swag.IsZero(m.Committer) { // not required
		return nil
	}

	if m.Committer != nil {

		if err := m.Committer.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *CommitsItems0) validateParents(formats strfmt.Registry) error {

	if swag.IsZero(m.Parents) { // not required
		return nil
	}

	for i := 0; i < len(m.Parents); i++ {

		if swag.IsZero(m.Parents[i]) { // not required
			continue
		}

		if m.Parents[i] != nil {

			if err := m.Parents[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// CommitsItems0Author commits items0 author
// swagger:model CommitsItems0Author
type CommitsItems0Author struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this commits items0 author
func (m *CommitsItems0Author) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// CommitsItems0Commit commits items0 commit
// swagger:model CommitsItems0Commit
type CommitsItems0Commit struct {

	// author
	Author *CommitsItems0CommitAuthor `json:"author,omitempty"`

	// committer
	Committer *CommitsItems0CommitCommitter `json:"committer,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// tree
	Tree *CommitsItems0CommitTree `json:"tree,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this commits items0 commit
func (m *CommitsItems0Commit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCommitter(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTree(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommitsItems0Commit) validateAuthor(formats strfmt.Registry) error {

	if swag.IsZero(m.Author) { // not required
		return nil
	}

	if m.Author != nil {

		if err := m.Author.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *CommitsItems0Commit) validateCommitter(formats strfmt.Registry) error {

	if swag.IsZero(m.Committer) { // not required
		return nil
	}

	if m.Committer != nil {

		if err := m.Committer.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *CommitsItems0Commit) validateTree(formats strfmt.Registry) error {

	if swag.IsZero(m.Tree) { // not required
		return nil
	}

	if m.Tree != nil {

		if err := m.Tree.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// CommitsItems0CommitAuthor commits items0 commit author
// swagger:model CommitsItems0CommitAuthor
type CommitsItems0CommitAuthor struct {

	// ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
	Date string `json:"date,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this commits items0 commit author
func (m *CommitsItems0CommitAuthor) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// CommitsItems0CommitCommitter commits items0 commit committer
// swagger:model CommitsItems0CommitCommitter
type CommitsItems0CommitCommitter struct {

	// ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
	Date string `json:"date,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this commits items0 commit committer
func (m *CommitsItems0CommitCommitter) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// CommitsItems0CommitTree commits items0 commit tree
// swagger:model CommitsItems0CommitTree
type CommitsItems0CommitTree struct {

	// sha
	Sha string `json:"sha,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this commits items0 commit tree
func (m *CommitsItems0CommitTree) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// CommitsItems0Committer commits items0 committer
// swagger:model CommitsItems0Committer
type CommitsItems0Committer struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this commits items0 committer
func (m *CommitsItems0Committer) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// CommitsItems0ParentsItems0 commits items0 parents items0
// swagger:model CommitsItems0ParentsItems0
type CommitsItems0ParentsItems0 struct {

	// sha
	Sha string `json:"sha,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this commits items0 parents items0
func (m *CommitsItems0ParentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
