package def

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// PatchGist patch gist
// swagger:model patchGist
type PatchGist struct {

	// description
	Description string `json:"description,omitempty"`

	// files
	Files *PatchGistFiles `json:"files,omitempty"`
}

// Validate validates this patch gist
func (m *PatchGist) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFiles(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchGist) validateFiles(formats strfmt.Registry) error {

	if swag.IsZero(m.Files) { // not required
		return nil
	}

	if m.Files != nil {

		if err := m.Files.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// PatchGistFiles patch gist files
// swagger:model PatchGistFiles
type PatchGistFiles struct {

	// delete this file txt
	DeleteThisFileTxt string `json:"delete_this_file.txt,omitempty"`

	// file1 txt
	File1Txt *PatchGistFilesFile1Txt `json:"file1.txt,omitempty"`

	// new file txt
	NewFileTxt *PatchGistFilesNewFileTxt `json:"new_file.txt,omitempty"`

	// old name txt
	OldNameTxt *PatchGistFilesOldNameTxt `json:"old_name.txt,omitempty"`
}

// Validate validates this patch gist files
func (m *PatchGistFiles) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFile1Txt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNewFileTxt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOldNameTxt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchGistFiles) validateFile1Txt(formats strfmt.Registry) error {

	if swag.IsZero(m.File1Txt) { // not required
		return nil
	}

	if m.File1Txt != nil {

		if err := m.File1Txt.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *PatchGistFiles) validateNewFileTxt(formats strfmt.Registry) error {

	if swag.IsZero(m.NewFileTxt) { // not required
		return nil
	}

	if m.NewFileTxt != nil {

		if err := m.NewFileTxt.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *PatchGistFiles) validateOldNameTxt(formats strfmt.Registry) error {

	if swag.IsZero(m.OldNameTxt) { // not required
		return nil
	}

	if m.OldNameTxt != nil {

		if err := m.OldNameTxt.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// PatchGistFilesFile1Txt patch gist files file1 txt
// swagger:model PatchGistFilesFile1Txt
type PatchGistFilesFile1Txt struct {

	// content
	Content string `json:"content,omitempty"`
}

// Validate validates this patch gist files file1 txt
func (m *PatchGistFilesFile1Txt) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// PatchGistFilesNewFileTxt patch gist files new file txt
// swagger:model PatchGistFilesNewFileTxt
type PatchGistFilesNewFileTxt struct {

	// content
	Content string `json:"content,omitempty"`
}

// Validate validates this patch gist files new file txt
func (m *PatchGistFilesNewFileTxt) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// PatchGistFilesOldNameTxt patch gist files old name txt
// swagger:model PatchGistFilesOldNameTxt
type PatchGistFilesOldNameTxt struct {

	// content
	Content string `json:"content,omitempty"`

	// filename
	Filename string `json:"filename,omitempty"`
}

// Validate validates this patch gist files old name txt
func (m *PatchGistFilesOldNameTxt) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
