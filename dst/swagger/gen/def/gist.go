package def

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// Gist gist
// swagger:model gist
type Gist struct {

	// comments
	Comments int64 `json:"comments,omitempty"`

	// comments url
	CommentsURL string `json:"comments_url,omitempty"`

	// Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	CreatedAt string `json:"created_at,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// files
	Files *GistFiles `json:"files,omitempty"`

	// forks
	Forks []*GistForksItems0 `json:"forks"`

	// git pull url
	GitPullURL string `json:"git_pull_url,omitempty"`

	// git push url
	GitPushURL string `json:"git_push_url,omitempty"`

	// history
	History []*GistHistoryItems0 `json:"history"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// public
	Public bool `json:"public,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// user
	User *GistUser `json:"user,omitempty"`
}

// Validate validates this gist
func (m *Gist) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFiles(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateForks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHistory(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Gist) validateFiles(formats strfmt.Registry) error {

	if swag.IsZero(m.Files) { // not required
		return nil
	}

	if m.Files != nil {

		if err := m.Files.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Gist) validateForks(formats strfmt.Registry) error {

	if swag.IsZero(m.Forks) { // not required
		return nil
	}

	for i := 0; i < len(m.Forks); i++ {

		if swag.IsZero(m.Forks[i]) { // not required
			continue
		}

		if m.Forks[i] != nil {

			if err := m.Forks[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Gist) validateHistory(formats strfmt.Registry) error {

	if swag.IsZero(m.History) { // not required
		return nil
	}

	for i := 0; i < len(m.History); i++ {

		if swag.IsZero(m.History[i]) { // not required
			continue
		}

		if m.History[i] != nil {

			if err := m.History[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Gist) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {

		if err := m.User.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// GistFiles gist files
// swagger:model GistFiles
type GistFiles struct {

	// ring erl
	RingErl *GistFilesRingErl `json:"ring.erl,omitempty"`
}

// Validate validates this gist files
func (m *GistFiles) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRingErl(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GistFiles) validateRingErl(formats strfmt.Registry) error {

	if swag.IsZero(m.RingErl) { // not required
		return nil
	}

	if m.RingErl != nil {

		if err := m.RingErl.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// GistFilesRingErl gist files ring erl
// swagger:model GistFilesRingErl
type GistFilesRingErl struct {

	// filename
	Filename string `json:"filename,omitempty"`

	// raw url
	RawURL string `json:"raw_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`
}

// Validate validates this gist files ring erl
func (m *GistFilesRingErl) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// GistForksItems0 gist forks items0
// swagger:model GistForksItems0
type GistForksItems0 struct {

	// Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	CreatedAt string `json:"created_at,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// user
	User *GistForksItems0User `json:"user,omitempty"`
}

// Validate validates this gist forks items0
func (m *GistForksItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUser(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GistForksItems0) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {

		if err := m.User.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// GistForksItems0User gist forks items0 user
// swagger:model GistForksItems0User
type GistForksItems0User struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this gist forks items0 user
func (m *GistForksItems0User) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// GistHistoryItems0 gist history items0
// swagger:model GistHistoryItems0
type GistHistoryItems0 struct {

	// change status
	ChangeStatus *GistHistoryItems0ChangeStatus `json:"change_status,omitempty"`

	// Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	CommittedAt string `json:"committed_at,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// user
	User *GistHistoryItems0User `json:"user,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this gist history items0
func (m *GistHistoryItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChangeStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GistHistoryItems0) validateChangeStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ChangeStatus) { // not required
		return nil
	}

	if m.ChangeStatus != nil {

		if err := m.ChangeStatus.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *GistHistoryItems0) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {

		if err := m.User.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// GistHistoryItems0ChangeStatus gist history items0 change status
// swagger:model GistHistoryItems0ChangeStatus
type GistHistoryItems0ChangeStatus struct {

	// additions
	Additions int64 `json:"additions,omitempty"`

	// deletions
	Deletions int64 `json:"deletions,omitempty"`

	// total
	Total int64 `json:"total,omitempty"`
}

// Validate validates this gist history items0 change status
func (m *GistHistoryItems0ChangeStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// GistHistoryItems0User gist history items0 user
// swagger:model GistHistoryItems0User
type GistHistoryItems0User struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this gist history items0 user
func (m *GistHistoryItems0User) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// GistUser gist user
// swagger:model GistUser
type GistUser struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this gist user
func (m *GistUser) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
