package def

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Event event
// swagger:model event
type Event struct {

	// actor
	Actor *EventActor `json:"actor,omitempty"`

	// commit id
	CommitID string `json:"commit_id,omitempty"`

	// ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
	CreatedAt string `json:"created_at,omitempty"`

	// event
	Event string `json:"event,omitempty"`

	// issue
	Issue *EventIssue `json:"issue,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this event
func (m *Event) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIssue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Event) validateActor(formats strfmt.Registry) error {

	if swag.IsZero(m.Actor) { // not required
		return nil
	}

	if m.Actor != nil {

		if err := m.Actor.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Event) validateIssue(formats strfmt.Registry) error {

	if swag.IsZero(m.Issue) { // not required
		return nil
	}

	if m.Issue != nil {

		if err := m.Issue.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// EventActor event actor
// swagger:model EventActor
type EventActor struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this event actor
func (m *EventActor) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// EventIssue event issue
// swagger:model EventIssue
type EventIssue struct {

	// assignee
	Assignee *EventIssueAssignee `json:"assignee,omitempty"`

	// body
	Body string `json:"body,omitempty"`

	// ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
	ClosedAt string `json:"closed_at,omitempty"`

	// comments
	Comments int64 `json:"comments,omitempty"`

	// ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
	CreatedAt string `json:"created_at,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// labels
	Labels []*EventIssueLabelsItems0 `json:"labels"`

	// milestone
	Milestone *EventIssueMilestone `json:"milestone,omitempty"`

	// number
	Number int64 `json:"number,omitempty"`

	// pull request
	PullRequest *EventIssuePullRequest `json:"pull_request,omitempty"`

	// state
	State interface{} `json:"state,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
	UpdatedAt string `json:"updated_at,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// user
	User *EventIssueUser `json:"user,omitempty"`
}

// Validate validates this event issue
func (m *EventIssue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignee(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMilestone(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePullRequest(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventIssue) validateAssignee(formats strfmt.Registry) error {

	if swag.IsZero(m.Assignee) { // not required
		return nil
	}

	if m.Assignee != nil {

		if err := m.Assignee.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *EventIssue) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	for i := 0; i < len(m.Labels); i++ {

		if swag.IsZero(m.Labels[i]) { // not required
			continue
		}

		if m.Labels[i] != nil {

			if err := m.Labels[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *EventIssue) validateMilestone(formats strfmt.Registry) error {

	if swag.IsZero(m.Milestone) { // not required
		return nil
	}

	if m.Milestone != nil {

		if err := m.Milestone.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *EventIssue) validatePullRequest(formats strfmt.Registry) error {

	if swag.IsZero(m.PullRequest) { // not required
		return nil
	}

	if m.PullRequest != nil {

		if err := m.PullRequest.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var eventIssueTypeStatePropEnum []interface{}

func init() {
	var res []interface{}
	if err := json.Unmarshal([]byte(`["open","closed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventIssueTypeStatePropEnum = append(eventIssueTypeStatePropEnum, v)
	}
}

// prop value enum
func (m *EventIssue) validateStateEnum(path, location string, value interface{}) error {
	if err := validate.Enum(path, location, value, eventIssueTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EventIssue) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	return nil
}

func (m *EventIssue) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {

		if err := m.User.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// EventIssueAssignee event issue assignee
// swagger:model EventIssueAssignee
type EventIssueAssignee struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this event issue assignee
func (m *EventIssueAssignee) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// EventIssueLabelsItems0 event issue labels items0
// swagger:model EventIssueLabelsItems0
type EventIssueLabelsItems0 struct {

	// color
	Color string `json:"color,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this event issue labels items0
func (m *EventIssueLabelsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// EventIssueMilestone event issue milestone
// swagger:model EventIssueMilestone
type EventIssueMilestone struct {

	// closed issues
	ClosedIssues int64 `json:"closed_issues,omitempty"`

	// ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
	CreatedAt string `json:"created_at,omitempty"`

	// creator
	Creator *EventIssueMilestoneCreator `json:"creator,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
	DueOn string `json:"due_on,omitempty"`

	// number
	Number int64 `json:"number,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues,omitempty"`

	// state
	State interface{} `json:"state,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this event issue milestone
func (m *EventIssueMilestone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreator(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventIssueMilestone) validateCreator(formats strfmt.Registry) error {

	if swag.IsZero(m.Creator) { // not required
		return nil
	}

	if m.Creator != nil {

		if err := m.Creator.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var eventIssueMilestoneTypeStatePropEnum []interface{}

func init() {
	var res []interface{}
	if err := json.Unmarshal([]byte(`["open","closed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventIssueMilestoneTypeStatePropEnum = append(eventIssueMilestoneTypeStatePropEnum, v)
	}
}

// prop value enum
func (m *EventIssueMilestone) validateStateEnum(path, location string, value interface{}) error {
	if err := validate.Enum(path, location, value, eventIssueMilestoneTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EventIssueMilestone) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	return nil
}

// EventIssueMilestoneCreator event issue milestone creator
// swagger:model EventIssueMilestoneCreator
type EventIssueMilestoneCreator struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this event issue milestone creator
func (m *EventIssueMilestoneCreator) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// EventIssuePullRequest event issue pull request
// swagger:model EventIssuePullRequest
type EventIssuePullRequest struct {

	// diff url
	DiffURL string `json:"diff_url,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// patch url
	PatchURL string `json:"patch_url,omitempty"`
}

// Validate validates this event issue pull request
func (m *EventIssuePullRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// EventIssueUser event issue user
// swagger:model EventIssueUser
type EventIssueUser struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this event issue user
func (m *EventIssueUser) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
