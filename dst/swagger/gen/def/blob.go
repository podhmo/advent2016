package def

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Blob blob
// swagger:model blob
type Blob struct {

	// content
	Content string `json:"content,omitempty"`

	// encoding
	Encoding interface{} `json:"encoding,omitempty"`

	// sha
	Sha string `json:"sha,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`
}

// Validate validates this blob
func (m *Blob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEncoding(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var blobTypeEncodingPropEnum []interface{}

func init() {
	var res []interface{}
	if err := json.Unmarshal([]byte(`["utf-8","base64"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		blobTypeEncodingPropEnum = append(blobTypeEncodingPropEnum, v)
	}
}

// prop value enum
func (m *Blob) validateEncodingEnum(path, location string, value interface{}) error {
	if err := validate.Enum(path, location, value, blobTypeEncodingPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Blob) validateEncoding(formats strfmt.Registry) error {

	if swag.IsZero(m.Encoding) { // not required
		return nil
	}

	return nil
}
