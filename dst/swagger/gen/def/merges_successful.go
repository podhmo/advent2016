package def

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// MergesSuccessful merges successful
// swagger:model mergesSuccessful
type MergesSuccessful struct {

	// author
	Author *MergesSuccessfulAuthor `json:"author,omitempty"`

	// comments url
	CommentsURL string `json:"comments_url,omitempty"`

	// commit
	Commit *MergesSuccessfulCommit `json:"commit,omitempty"`

	// committer
	Committer *MergesSuccessfulCommitter `json:"committer,omitempty"`

	// merged
	Merged bool `json:"merged,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// parents
	Parents []*MergesSuccessfulParentsItems0 `json:"parents"`

	// sha
	Sha string `json:"sha,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this merges successful
func (m *MergesSuccessful) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCommit(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCommitter(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParents(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MergesSuccessful) validateAuthor(formats strfmt.Registry) error {

	if swag.IsZero(m.Author) { // not required
		return nil
	}

	if m.Author != nil {

		if err := m.Author.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *MergesSuccessful) validateCommit(formats strfmt.Registry) error {

	if swag.IsZero(m.Commit) { // not required
		return nil
	}

	if m.Commit != nil {

		if err := m.Commit.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *MergesSuccessful) validateCommitter(formats strfmt.Registry) error {

	if swag.IsZero(m.Committer) { // not required
		return nil
	}

	if m.Committer != nil {

		if err := m.Committer.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *MergesSuccessful) validateParents(formats strfmt.Registry) error {

	if swag.IsZero(m.Parents) { // not required
		return nil
	}

	for i := 0; i < len(m.Parents); i++ {

		if swag.IsZero(m.Parents[i]) { // not required
			continue
		}

		if m.Parents[i] != nil {

			if err := m.Parents[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MergesSuccessfulAuthor merges successful author
// swagger:model MergesSuccessfulAuthor
type MergesSuccessfulAuthor struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// events url
	EventsURL string `json:"events_url,omitempty"`

	// followers url
	FollowersURL string `json:"followers_url,omitempty"`

	// following url
	FollowingURL string `json:"following_url,omitempty"`

	// gists url
	GistsURL string `json:"gists_url,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// organizations url
	OrganizationsURL string `json:"organizations_url,omitempty"`

	// received events url
	ReceivedEventsURL string `json:"received_events_url,omitempty"`

	// repos url
	ReposURL string `json:"repos_url,omitempty"`

	// starred url
	StarredURL string `json:"starred_url,omitempty"`

	// subscriptions url
	SubscriptionsURL string `json:"subscriptions_url,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this merges successful author
func (m *MergesSuccessfulAuthor) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MergesSuccessfulCommit merges successful commit
// swagger:model MergesSuccessfulCommit
type MergesSuccessfulCommit struct {

	// author
	Author *MergesSuccessfulCommitAuthor `json:"author,omitempty"`

	// comment count
	CommentCount int64 `json:"comment_count,omitempty"`

	// committer
	Committer *MergesSuccessfulCommitCommitter `json:"committer,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// tree
	Tree *MergesSuccessfulCommitTree `json:"tree,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this merges successful commit
func (m *MergesSuccessfulCommit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCommitter(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTree(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MergesSuccessfulCommit) validateAuthor(formats strfmt.Registry) error {

	if swag.IsZero(m.Author) { // not required
		return nil
	}

	if m.Author != nil {

		if err := m.Author.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *MergesSuccessfulCommit) validateCommitter(formats strfmt.Registry) error {

	if swag.IsZero(m.Committer) { // not required
		return nil
	}

	if m.Committer != nil {

		if err := m.Committer.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *MergesSuccessfulCommit) validateTree(formats strfmt.Registry) error {

	if swag.IsZero(m.Tree) { // not required
		return nil
	}

	if m.Tree != nil {

		if err := m.Tree.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// MergesSuccessfulCommitAuthor merges successful commit author
// swagger:model MergesSuccessfulCommitAuthor
type MergesSuccessfulCommitAuthor struct {

	// date
	Date string `json:"date,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this merges successful commit author
func (m *MergesSuccessfulCommitAuthor) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MergesSuccessfulCommitCommitter merges successful commit committer
// swagger:model MergesSuccessfulCommitCommitter
type MergesSuccessfulCommitCommitter struct {

	// date
	Date string `json:"date,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this merges successful commit committer
func (m *MergesSuccessfulCommitCommitter) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MergesSuccessfulCommitTree merges successful commit tree
// swagger:model MergesSuccessfulCommitTree
type MergesSuccessfulCommitTree struct {

	// sha
	Sha string `json:"sha,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this merges successful commit tree
func (m *MergesSuccessfulCommitTree) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MergesSuccessfulCommitter merges successful committer
// swagger:model MergesSuccessfulCommitter
type MergesSuccessfulCommitter struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// events url
	EventsURL string `json:"events_url,omitempty"`

	// followers url
	FollowersURL string `json:"followers_url,omitempty"`

	// following url
	FollowingURL string `json:"following_url,omitempty"`

	// gists url
	GistsURL string `json:"gists_url,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// organizations url
	OrganizationsURL string `json:"organizations_url,omitempty"`

	// received events url
	ReceivedEventsURL string `json:"received_events_url,omitempty"`

	// repos url
	ReposURL string `json:"repos_url,omitempty"`

	// starred url
	StarredURL string `json:"starred_url,omitempty"`

	// subscriptions url
	SubscriptionsURL string `json:"subscriptions_url,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this merges successful committer
func (m *MergesSuccessfulCommitter) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MergesSuccessfulParentsItems0 merges successful parents items0
// swagger:model MergesSuccessfulParentsItems0
type MergesSuccessfulParentsItems0 struct {

	// sha
	Sha string `json:"sha,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this merges successful parents items0
func (m *MergesSuccessfulParentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
