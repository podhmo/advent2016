package def

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// PullRequest pull request
// swagger:model pullRequest
type PullRequest struct {

	// links
	Links *PullRequestLinks `json:"_links,omitempty"`

	// additions
	Additions int64 `json:"additions,omitempty"`

	// base
	Base *PullRequestBase `json:"base,omitempty"`

	// body
	Body string `json:"body,omitempty"`

	// changed files
	ChangedFiles int64 `json:"changed_files,omitempty"`

	// closed at
	ClosedAt string `json:"closed_at,omitempty"`

	// comments
	Comments int64 `json:"comments,omitempty"`

	// commits
	Commits int64 `json:"commits,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// deletions
	Deletions int64 `json:"deletions,omitempty"`

	// diff url
	DiffURL string `json:"diff_url,omitempty"`

	// head
	Head *PullRequestHead `json:"head,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// issue url
	IssueURL string `json:"issue_url,omitempty"`

	// merge commit sha
	MergeCommitSha string `json:"merge_commit_sha,omitempty"`

	// mergeable
	Mergeable bool `json:"mergeable,omitempty"`

	// merged
	Merged bool `json:"merged,omitempty"`

	// merged at
	MergedAt string `json:"merged_at,omitempty"`

	// merged by
	MergedBy *PullRequestMergedBy `json:"merged_by,omitempty"`

	// number
	Number int64 `json:"number,omitempty"`

	// patch url
	PatchURL string `json:"patch_url,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// user
	User *PullRequestUser `json:"user,omitempty"`
}

// Validate validates this pull request
func (m *PullRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBase(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHead(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMergedBy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PullRequest) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {

		if err := m.Links.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *PullRequest) validateBase(formats strfmt.Registry) error {

	if swag.IsZero(m.Base) { // not required
		return nil
	}

	if m.Base != nil {

		if err := m.Base.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *PullRequest) validateHead(formats strfmt.Registry) error {

	if swag.IsZero(m.Head) { // not required
		return nil
	}

	if m.Head != nil {

		if err := m.Head.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *PullRequest) validateMergedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.MergedBy) { // not required
		return nil
	}

	if m.MergedBy != nil {

		if err := m.MergedBy.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *PullRequest) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {

		if err := m.User.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// PullRequestBase pull request base
// swagger:model PullRequestBase
type PullRequestBase struct {

	// label
	Label string `json:"label,omitempty"`

	// ref
	Ref string `json:"ref,omitempty"`

	// repo
	Repo *PullRequestBaseRepo `json:"repo,omitempty"`

	// sha
	Sha string `json:"sha,omitempty"`

	// user
	User *PullRequestBaseUser `json:"user,omitempty"`
}

// Validate validates this pull request base
func (m *PullRequestBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRepo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PullRequestBase) validateRepo(formats strfmt.Registry) error {

	if swag.IsZero(m.Repo) { // not required
		return nil
	}

	if m.Repo != nil {

		if err := m.Repo.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *PullRequestBase) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {

		if err := m.User.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// PullRequestBaseRepo pull request base repo
// swagger:model PullRequestBaseRepo
type PullRequestBaseRepo struct {

	// clone url
	CloneURL string `json:"clone_url,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks,omitempty"`

	// forks count
	ForksCount int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// git url
	GitURL string `json:"git_url,omitempty"`

	// homepage
	Homepage string `json:"homepage,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// language
	Language interface{} `json:"language,omitempty"`

	// master branch
	MasterBranch string `json:"master_branch,omitempty"`

	// mirror url
	MirrorURL string `json:"mirror_url,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues,omitempty"`

	// open issues count
	OpenIssuesCount int64 `json:"open_issues_count,omitempty"`

	// owner
	Owner *PullRequestBaseRepoOwner `json:"owner,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// pushed at
	PushedAt string `json:"pushed_at,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// ssh url
	SSHURL string `json:"ssh_url,omitempty"`

	// svn url
	SvnURL string `json:"svn_url,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// watchers
	Watchers int64 `json:"watchers,omitempty"`

	// watchers count
	WatchersCount int64 `json:"watchers_count,omitempty"`
}

// Validate validates this pull request base repo
func (m *PullRequestBaseRepo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOwner(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PullRequestBaseRepo) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {

		if err := m.Owner.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// PullRequestBaseRepoOwner pull request base repo owner
// swagger:model PullRequestBaseRepoOwner
type PullRequestBaseRepoOwner struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this pull request base repo owner
func (m *PullRequestBaseRepoOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// PullRequestBaseUser pull request base user
// swagger:model PullRequestBaseUser
type PullRequestBaseUser struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this pull request base user
func (m *PullRequestBaseUser) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// PullRequestHead pull request head
// swagger:model PullRequestHead
type PullRequestHead struct {

	// label
	Label string `json:"label,omitempty"`

	// ref
	Ref string `json:"ref,omitempty"`

	// repo
	Repo *PullRequestHeadRepo `json:"repo,omitempty"`

	// sha
	Sha string `json:"sha,omitempty"`

	// user
	User *PullRequestHeadUser `json:"user,omitempty"`
}

// Validate validates this pull request head
func (m *PullRequestHead) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRepo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PullRequestHead) validateRepo(formats strfmt.Registry) error {

	if swag.IsZero(m.Repo) { // not required
		return nil
	}

	if m.Repo != nil {

		if err := m.Repo.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *PullRequestHead) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {

		if err := m.User.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// PullRequestHeadRepo pull request head repo
// swagger:model PullRequestHeadRepo
type PullRequestHeadRepo struct {

	// clone url
	CloneURL string `json:"clone_url,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks,omitempty"`

	// forks count
	ForksCount int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// git url
	GitURL string `json:"git_url,omitempty"`

	// homepage
	Homepage string `json:"homepage,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// language
	Language interface{} `json:"language,omitempty"`

	// master branch
	MasterBranch string `json:"master_branch,omitempty"`

	// mirror url
	MirrorURL string `json:"mirror_url,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues,omitempty"`

	// open issues count
	OpenIssuesCount int64 `json:"open_issues_count,omitempty"`

	// owner
	Owner *PullRequestHeadRepoOwner `json:"owner,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// pushed at
	PushedAt string `json:"pushed_at,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// ssh url
	SSHURL string `json:"ssh_url,omitempty"`

	// svn url
	SvnURL string `json:"svn_url,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// watchers
	Watchers int64 `json:"watchers,omitempty"`

	// watchers count
	WatchersCount int64 `json:"watchers_count,omitempty"`
}

// Validate validates this pull request head repo
func (m *PullRequestHeadRepo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOwner(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PullRequestHeadRepo) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {

		if err := m.Owner.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// PullRequestHeadRepoOwner pull request head repo owner
// swagger:model PullRequestHeadRepoOwner
type PullRequestHeadRepoOwner struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this pull request head repo owner
func (m *PullRequestHeadRepoOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// PullRequestHeadUser pull request head user
// swagger:model PullRequestHeadUser
type PullRequestHeadUser struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this pull request head user
func (m *PullRequestHeadUser) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// PullRequestLinks pull request links
// swagger:model PullRequestLinks
type PullRequestLinks struct {

	// comments
	Comments *PullRequestLinksComments `json:"comments,omitempty"`

	// html
	HTML *PullRequestLinksHTML `json:"html,omitempty"`

	// review comments
	ReviewComments *PullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// self
	Self *PullRequestLinksSelf `json:"self,omitempty"`
}

// Validate validates this pull request links
func (m *PullRequestLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComments(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHTML(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReviewComments(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PullRequestLinks) validateComments(formats strfmt.Registry) error {

	if swag.IsZero(m.Comments) { // not required
		return nil
	}

	if m.Comments != nil {

		if err := m.Comments.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *PullRequestLinks) validateHTML(formats strfmt.Registry) error {

	if swag.IsZero(m.HTML) { // not required
		return nil
	}

	if m.HTML != nil {

		if err := m.HTML.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *PullRequestLinks) validateReviewComments(formats strfmt.Registry) error {

	if swag.IsZero(m.ReviewComments) { // not required
		return nil
	}

	if m.ReviewComments != nil {

		if err := m.ReviewComments.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *PullRequestLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {

		if err := m.Self.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// PullRequestLinksComments pull request links comments
// swagger:model PullRequestLinksComments
type PullRequestLinksComments struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this pull request links comments
func (m *PullRequestLinksComments) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// PullRequestLinksHTML pull request links HTML
// swagger:model PullRequestLinksHTML
type PullRequestLinksHTML struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this pull request links HTML
func (m *PullRequestLinksHTML) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// PullRequestLinksReviewComments pull request links review comments
// swagger:model PullRequestLinksReviewComments
type PullRequestLinksReviewComments struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this pull request links review comments
func (m *PullRequestLinksReviewComments) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// PullRequestLinksSelf pull request links self
// swagger:model PullRequestLinksSelf
type PullRequestLinksSelf struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this pull request links self
func (m *PullRequestLinksSelf) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// PullRequestMergedBy pull request merged by
// swagger:model PullRequestMergedBy
type PullRequestMergedBy struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this pull request merged by
func (m *PullRequestMergedBy) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// PullRequestUser pull request user
// swagger:model PullRequestUser
type PullRequestUser struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this pull request user
func (m *PullRequestUser) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
