package def

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// SearchUsersByKeyword search users by keyword
// swagger:model search-users-by-keyword
type SearchUsersByKeyword struct {

	// users
	Users []*SearchUsersByKeywordUsersItems0 `json:"users"`
}

// Validate validates this search users by keyword
func (m *SearchUsersByKeyword) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUsers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchUsersByKeyword) validateUsers(formats strfmt.Registry) error {

	if swag.IsZero(m.Users) { // not required
		return nil
	}

	for i := 0; i < len(m.Users); i++ {

		if swag.IsZero(m.Users[i]) { // not required
			continue
		}

		if m.Users[i] != nil {

			if err := m.Users[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// SearchUsersByKeywordUsersItems0 search users by keyword users items0
// swagger:model SearchUsersByKeywordUsersItems0
type SearchUsersByKeywordUsersItems0 struct {

	// created
	Created string `json:"created,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// followers
	Followers int64 `json:"followers,omitempty"`

	// followers count
	FollowersCount int64 `json:"followers_count,omitempty"`

	// fullname
	Fullname string `json:"fullname,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// language
	Language string `json:"language,omitempty"`

	// location
	Location string `json:"location,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// public repo count
	PublicRepoCount int64 `json:"public_repo_count,omitempty"`

	// repos
	Repos int64 `json:"repos,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this search users by keyword users items0
func (m *SearchUsersByKeywordUsersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
