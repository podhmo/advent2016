package def

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// Notifications notifications
// swagger:model notifications
type Notifications struct {

	// id
	ID int64 `json:"id,omitempty"`

	// last read at
	LastReadAt string `json:"last_read_at,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`

	// repository
	Repository *NotificationsRepository `json:"repository,omitempty"`

	// subject
	Subject *NotificationsSubject `json:"subject,omitempty"`

	// unread
	Unread bool `json:"unread,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this notifications
func (m *Notifications) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRepository(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Notifications) validateRepository(formats strfmt.Registry) error {

	if swag.IsZero(m.Repository) { // not required
		return nil
	}

	if m.Repository != nil {

		if err := m.Repository.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Notifications) validateSubject(formats strfmt.Registry) error {

	if swag.IsZero(m.Subject) { // not required
		return nil
	}

	if m.Subject != nil {

		if err := m.Subject.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// NotificationsRepository notifications repository
// swagger:model NotificationsRepository
type NotificationsRepository struct {

	// description
	Description string `json:"description,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// owner
	Owner *NotificationsRepositoryOwner `json:"owner,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this notifications repository
func (m *NotificationsRepository) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOwner(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NotificationsRepository) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {

		if err := m.Owner.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// NotificationsRepositoryOwner notifications repository owner
// swagger:model NotificationsRepositoryOwner
type NotificationsRepositoryOwner struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this notifications repository owner
func (m *NotificationsRepositoryOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// NotificationsSubject notifications subject
// swagger:model NotificationsSubject
type NotificationsSubject struct {

	// latest comment url
	LatestCommentURL string `json:"latest_comment_url,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this notifications subject
func (m *NotificationsSubject) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
