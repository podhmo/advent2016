package def

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// CompareCommits compare commits
// swagger:model compare-commits
type CompareCommits struct {

	// ahead by
	AheadBy int64 `json:"ahead_by,omitempty"`

	// base commit
	BaseCommit *CompareCommitsBaseCommit `json:"base_commit,omitempty"`

	// behind by
	BehindBy int64 `json:"behind_by,omitempty"`

	// commits
	Commits []*CompareCommitsCommitsItems0 `json:"commits"`

	// diff url
	DiffURL string `json:"diff_url,omitempty"`

	// files
	Files []*CompareCommitsFilesItems0 `json:"files"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// patch url
	PatchURL string `json:"patch_url,omitempty"`

	// permalink url
	PermalinkURL string `json:"permalink_url,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// total commits
	TotalCommits int64 `json:"total_commits,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this compare commits
func (m *CompareCommits) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseCommit(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCommits(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFiles(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompareCommits) validateBaseCommit(formats strfmt.Registry) error {

	if swag.IsZero(m.BaseCommit) { // not required
		return nil
	}

	if m.BaseCommit != nil {

		if err := m.BaseCommit.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *CompareCommits) validateCommits(formats strfmt.Registry) error {

	if swag.IsZero(m.Commits) { // not required
		return nil
	}

	for i := 0; i < len(m.Commits); i++ {

		if swag.IsZero(m.Commits[i]) { // not required
			continue
		}

		if m.Commits[i] != nil {

			if err := m.Commits[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *CompareCommits) validateFiles(formats strfmt.Registry) error {

	if swag.IsZero(m.Files) { // not required
		return nil
	}

	for i := 0; i < len(m.Files); i++ {

		if swag.IsZero(m.Files[i]) { // not required
			continue
		}

		if m.Files[i] != nil {

			if err := m.Files[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// CompareCommitsBaseCommit compare commits base commit
// swagger:model CompareCommitsBaseCommit
type CompareCommitsBaseCommit struct {

	// author
	Author *CompareCommitsBaseCommitAuthor `json:"author,omitempty"`

	// commit
	Commit *CompareCommitsBaseCommitCommit `json:"commit,omitempty"`

	// committer
	Committer *CompareCommitsBaseCommitCommitter `json:"committer,omitempty"`

	// parents
	Parents []*CompareCommitsBaseCommitParentsItems0 `json:"parents"`

	// sha
	Sha string `json:"sha,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this compare commits base commit
func (m *CompareCommitsBaseCommit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCommit(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCommitter(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParents(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompareCommitsBaseCommit) validateAuthor(formats strfmt.Registry) error {

	if swag.IsZero(m.Author) { // not required
		return nil
	}

	if m.Author != nil {

		if err := m.Author.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *CompareCommitsBaseCommit) validateCommit(formats strfmt.Registry) error {

	if swag.IsZero(m.Commit) { // not required
		return nil
	}

	if m.Commit != nil {

		if err := m.Commit.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *CompareCommitsBaseCommit) validateCommitter(formats strfmt.Registry) error {

	if swag.IsZero(m.Committer) { // not required
		return nil
	}

	if m.Committer != nil {

		if err := m.Committer.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *CompareCommitsBaseCommit) validateParents(formats strfmt.Registry) error {

	if swag.IsZero(m.Parents) { // not required
		return nil
	}

	for i := 0; i < len(m.Parents); i++ {

		if swag.IsZero(m.Parents[i]) { // not required
			continue
		}

		if m.Parents[i] != nil {

			if err := m.Parents[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// CompareCommitsBaseCommitAuthor compare commits base commit author
// swagger:model CompareCommitsBaseCommitAuthor
type CompareCommitsBaseCommitAuthor struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// events url
	EventsURL string `json:"events_url,omitempty"`

	// followers url
	FollowersURL string `json:"followers_url,omitempty"`

	// following url
	FollowingURL string `json:"following_url,omitempty"`

	// gists url
	GistsURL string `json:"gists_url,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// organizations url
	OrganizationsURL string `json:"organizations_url,omitempty"`

	// received events url
	ReceivedEventsURL string `json:"received_events_url,omitempty"`

	// repos url
	ReposURL string `json:"repos_url,omitempty"`

	// site admin
	SiteAdmin bool `json:"site_admin,omitempty"`

	// starred url
	StarredURL string `json:"starred_url,omitempty"`

	// subscriptions url
	SubscriptionsURL string `json:"subscriptions_url,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this compare commits base commit author
func (m *CompareCommitsBaseCommitAuthor) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// CompareCommitsBaseCommitCommit compare commits base commit commit
// swagger:model CompareCommitsBaseCommitCommit
type CompareCommitsBaseCommitCommit struct {

	// author
	Author *CompareCommitsBaseCommitCommitAuthor `json:"author,omitempty"`

	// committer
	Committer *CompareCommitsBaseCommitCommitCommitter `json:"committer,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// tree
	Tree *CompareCommitsBaseCommitCommitTree `json:"tree,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this compare commits base commit commit
func (m *CompareCommitsBaseCommitCommit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCommitter(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTree(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompareCommitsBaseCommitCommit) validateAuthor(formats strfmt.Registry) error {

	if swag.IsZero(m.Author) { // not required
		return nil
	}

	if m.Author != nil {

		if err := m.Author.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *CompareCommitsBaseCommitCommit) validateCommitter(formats strfmt.Registry) error {

	if swag.IsZero(m.Committer) { // not required
		return nil
	}

	if m.Committer != nil {

		if err := m.Committer.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *CompareCommitsBaseCommitCommit) validateTree(formats strfmt.Registry) error {

	if swag.IsZero(m.Tree) { // not required
		return nil
	}

	if m.Tree != nil {

		if err := m.Tree.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// CompareCommitsBaseCommitCommitAuthor compare commits base commit commit author
// swagger:model CompareCommitsBaseCommitCommitAuthor
type CompareCommitsBaseCommitCommitAuthor struct {

	// date
	Date string `json:"date,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this compare commits base commit commit author
func (m *CompareCommitsBaseCommitCommitAuthor) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// CompareCommitsBaseCommitCommitCommitter compare commits base commit commit committer
// swagger:model CompareCommitsBaseCommitCommitCommitter
type CompareCommitsBaseCommitCommitCommitter struct {

	// date
	Date string `json:"date,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this compare commits base commit commit committer
func (m *CompareCommitsBaseCommitCommitCommitter) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// CompareCommitsBaseCommitCommitTree compare commits base commit commit tree
// swagger:model CompareCommitsBaseCommitCommitTree
type CompareCommitsBaseCommitCommitTree struct {

	// sha
	Sha string `json:"sha,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this compare commits base commit commit tree
func (m *CompareCommitsBaseCommitCommitTree) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// CompareCommitsBaseCommitCommitter compare commits base commit committer
// swagger:model CompareCommitsBaseCommitCommitter
type CompareCommitsBaseCommitCommitter struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// events url
	EventsURL string `json:"events_url,omitempty"`

	// followers url
	FollowersURL string `json:"followers_url,omitempty"`

	// following url
	FollowingURL string `json:"following_url,omitempty"`

	// gists url
	GistsURL string `json:"gists_url,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// organizations url
	OrganizationsURL string `json:"organizations_url,omitempty"`

	// received events url
	ReceivedEventsURL string `json:"received_events_url,omitempty"`

	// repos url
	ReposURL string `json:"repos_url,omitempty"`

	// site admin
	SiteAdmin bool `json:"site_admin,omitempty"`

	// starred url
	StarredURL string `json:"starred_url,omitempty"`

	// subscriptions url
	SubscriptionsURL string `json:"subscriptions_url,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this compare commits base commit committer
func (m *CompareCommitsBaseCommitCommitter) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// CompareCommitsBaseCommitParentsItems0 compare commits base commit parents items0
// swagger:model CompareCommitsBaseCommitParentsItems0
type CompareCommitsBaseCommitParentsItems0 struct {

	// sha
	Sha string `json:"sha,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this compare commits base commit parents items0
func (m *CompareCommitsBaseCommitParentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// CompareCommitsCommitsItems0 compare commits commits items0
// swagger:model CompareCommitsCommitsItems0
type CompareCommitsCommitsItems0 struct {

	// author
	Author *CompareCommitsCommitsItems0Author `json:"author,omitempty"`

	// commit
	Commit *CompareCommitsCommitsItems0Commit `json:"commit,omitempty"`

	// committer
	Committer *CompareCommitsCommitsItems0Committer `json:"committer,omitempty"`

	// parents
	Parents []*CompareCommitsCommitsItems0ParentsItems0 `json:"parents"`

	// sha
	Sha string `json:"sha,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this compare commits commits items0
func (m *CompareCommitsCommitsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCommit(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCommitter(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParents(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompareCommitsCommitsItems0) validateAuthor(formats strfmt.Registry) error {

	if swag.IsZero(m.Author) { // not required
		return nil
	}

	if m.Author != nil {

		if err := m.Author.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *CompareCommitsCommitsItems0) validateCommit(formats strfmt.Registry) error {

	if swag.IsZero(m.Commit) { // not required
		return nil
	}

	if m.Commit != nil {

		if err := m.Commit.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *CompareCommitsCommitsItems0) validateCommitter(formats strfmt.Registry) error {

	if swag.IsZero(m.Committer) { // not required
		return nil
	}

	if m.Committer != nil {

		if err := m.Committer.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *CompareCommitsCommitsItems0) validateParents(formats strfmt.Registry) error {

	if swag.IsZero(m.Parents) { // not required
		return nil
	}

	for i := 0; i < len(m.Parents); i++ {

		if swag.IsZero(m.Parents[i]) { // not required
			continue
		}

		if m.Parents[i] != nil {

			if err := m.Parents[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// CompareCommitsCommitsItems0Author compare commits commits items0 author
// swagger:model CompareCommitsCommitsItems0Author
type CompareCommitsCommitsItems0Author struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// events url
	EventsURL string `json:"events_url,omitempty"`

	// followers url
	FollowersURL string `json:"followers_url,omitempty"`

	// following url
	FollowingURL string `json:"following_url,omitempty"`

	// gists url
	GistsURL string `json:"gists_url,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// organizations url
	OrganizationsURL string `json:"organizations_url,omitempty"`

	// received events url
	ReceivedEventsURL string `json:"received_events_url,omitempty"`

	// repos url
	ReposURL string `json:"repos_url,omitempty"`

	// site admin
	SiteAdmin bool `json:"site_admin,omitempty"`

	// starred url
	StarredURL string `json:"starred_url,omitempty"`

	// subscriptions url
	SubscriptionsURL string `json:"subscriptions_url,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this compare commits commits items0 author
func (m *CompareCommitsCommitsItems0Author) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// CompareCommitsCommitsItems0Commit compare commits commits items0 commit
// swagger:model CompareCommitsCommitsItems0Commit
type CompareCommitsCommitsItems0Commit struct {

	// author
	Author *CompareCommitsCommitsItems0CommitAuthor `json:"author,omitempty"`

	// committer
	Committer *CompareCommitsCommitsItems0CommitCommitter `json:"committer,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// tree
	Tree *CompareCommitsCommitsItems0CommitTree `json:"tree,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this compare commits commits items0 commit
func (m *CompareCommitsCommitsItems0Commit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCommitter(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTree(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompareCommitsCommitsItems0Commit) validateAuthor(formats strfmt.Registry) error {

	if swag.IsZero(m.Author) { // not required
		return nil
	}

	if m.Author != nil {

		if err := m.Author.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *CompareCommitsCommitsItems0Commit) validateCommitter(formats strfmt.Registry) error {

	if swag.IsZero(m.Committer) { // not required
		return nil
	}

	if m.Committer != nil {

		if err := m.Committer.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *CompareCommitsCommitsItems0Commit) validateTree(formats strfmt.Registry) error {

	if swag.IsZero(m.Tree) { // not required
		return nil
	}

	if m.Tree != nil {

		if err := m.Tree.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// CompareCommitsCommitsItems0CommitAuthor compare commits commits items0 commit author
// swagger:model CompareCommitsCommitsItems0CommitAuthor
type CompareCommitsCommitsItems0CommitAuthor struct {

	// date
	Date string `json:"date,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this compare commits commits items0 commit author
func (m *CompareCommitsCommitsItems0CommitAuthor) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// CompareCommitsCommitsItems0CommitCommitter compare commits commits items0 commit committer
// swagger:model CompareCommitsCommitsItems0CommitCommitter
type CompareCommitsCommitsItems0CommitCommitter struct {

	// date
	Date string `json:"date,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this compare commits commits items0 commit committer
func (m *CompareCommitsCommitsItems0CommitCommitter) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// CompareCommitsCommitsItems0CommitTree compare commits commits items0 commit tree
// swagger:model CompareCommitsCommitsItems0CommitTree
type CompareCommitsCommitsItems0CommitTree struct {

	// sha
	Sha string `json:"sha,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this compare commits commits items0 commit tree
func (m *CompareCommitsCommitsItems0CommitTree) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// CompareCommitsCommitsItems0Committer compare commits commits items0 committer
// swagger:model CompareCommitsCommitsItems0Committer
type CompareCommitsCommitsItems0Committer struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// events url
	EventsURL string `json:"events_url,omitempty"`

	// followers url
	FollowersURL string `json:"followers_url,omitempty"`

	// following url
	FollowingURL string `json:"following_url,omitempty"`

	// gists url
	GistsURL string `json:"gists_url,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// organizations url
	OrganizationsURL string `json:"organizations_url,omitempty"`

	// received events url
	ReceivedEventsURL string `json:"received_events_url,omitempty"`

	// repos url
	ReposURL string `json:"repos_url,omitempty"`

	// site admin
	SiteAdmin bool `json:"site_admin,omitempty"`

	// starred url
	StarredURL string `json:"starred_url,omitempty"`

	// subscriptions url
	SubscriptionsURL string `json:"subscriptions_url,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this compare commits commits items0 committer
func (m *CompareCommitsCommitsItems0Committer) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// CompareCommitsCommitsItems0ParentsItems0 compare commits commits items0 parents items0
// swagger:model CompareCommitsCommitsItems0ParentsItems0
type CompareCommitsCommitsItems0ParentsItems0 struct {

	// sha
	Sha string `json:"sha,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this compare commits commits items0 parents items0
func (m *CompareCommitsCommitsItems0ParentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// CompareCommitsFilesItems0 compare commits files items0
// swagger:model CompareCommitsFilesItems0
type CompareCommitsFilesItems0 struct {

	// additions
	Additions int64 `json:"additions,omitempty"`

	// blob url
	BlobURL string `json:"blob_url,omitempty"`

	// changes
	Changes int64 `json:"changes,omitempty"`

	// contents url
	ContentsURL string `json:"contents_url,omitempty"`

	// deletions
	Deletions int64 `json:"deletions,omitempty"`

	// filename
	Filename string `json:"filename,omitempty"`

	// patch
	Patch string `json:"patch,omitempty"`

	// raw url
	RawURL string `json:"raw_url,omitempty"`

	// sha
	Sha string `json:"sha,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this compare commits files items0
func (m *CompareCommitsFilesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
