package def

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Tags tags
// swagger:model tags
type Tags struct {

	// String of the tag message.
	// Required: true
	Message *string `json:"message"`

	// String of the SHA of the git object this is tagging.
	// Required: true
	Object *string `json:"object"`

	// tag
	// Required: true
	Tag *string `json:"tag"`

	// tagger
	// Required: true
	Tagger *TagsTagger `json:"tagger"`

	// String of the type of the object weâ€™re tagging. Normally this is a commit but it can also be a tree or a blob.
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this tags
func (m *Tags) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateObject(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTag(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTagger(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Tags) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *Tags) validateObject(formats strfmt.Registry) error {

	if err := validate.Required("object", "body", m.Object); err != nil {
		return err
	}

	return nil
}

func (m *Tags) validateTag(formats strfmt.Registry) error {

	if err := validate.Required("tag", "body", m.Tag); err != nil {
		return err
	}

	return nil
}

func (m *Tags) validateTagger(formats strfmt.Registry) error {

	if err := validate.Required("tagger", "body", m.Tagger); err != nil {
		return err
	}

	if m.Tagger != nil {

		if err := m.Tagger.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Tags) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// TagsTagger tags tagger
// swagger:model TagsTagger
type TagsTagger struct {

	// Timestamp of when this object was tagged.
	Date string `json:"date,omitempty"`

	// String of the email of the author of the tag.
	Email string `json:"email,omitempty"`

	// String of the name of the author of the tag.
	Name string `json:"name,omitempty"`
}

// Validate validates this tags tagger
func (m *TagsTagger) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
