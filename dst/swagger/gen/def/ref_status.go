package def

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// RefStatus ref status
// swagger:model refStatus
type RefStatus []*RefStatusItems0

// Validate validates this ref status
func (m RefStatus) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {

		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {

			if err := m[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// RefStatusItems0 ref status items0
// swagger:model RefStatusItems0
type RefStatusItems0 struct {

	// commit url
	CommitURL string `json:"commit_url,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// repository url
	RepositoryURL string `json:"repository_url,omitempty"`

	// sha
	Sha string `json:"sha,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// statuses
	Statuses []*RefStatusItems0StatusesItems0 `json:"statuses"`
}

// Validate validates this ref status items0
func (m *RefStatusItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatuses(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RefStatusItems0) validateStatuses(formats strfmt.Registry) error {

	if swag.IsZero(m.Statuses) { // not required
		return nil
	}

	for i := 0; i < len(m.Statuses); i++ {

		if swag.IsZero(m.Statuses[i]) { // not required
			continue
		}

		if m.Statuses[i] != nil {

			if err := m.Statuses[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// RefStatusItems0StatusesItems0 ref status items0 statuses items0
// swagger:model RefStatusItems0StatusesItems0
type RefStatusItems0StatusesItems0 struct {

	// context
	Context string `json:"context,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID float64 `json:"id,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// target url
	TargetURL string `json:"target_url,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this ref status items0 statuses items0
func (m *RefStatusItems0StatusesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
