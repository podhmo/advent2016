package def

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// Gists gists
// swagger:model gists
type Gists []*GistsItems0

// Validate validates this gists
func (m Gists) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {

		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {

			if err := m[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// GistsItems0 gists items0
// swagger:model GistsItems0
type GistsItems0 struct {

	// comments
	Comments int64 `json:"comments,omitempty"`

	// comments url
	CommentsURL string `json:"comments_url,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// files
	Files *GistsItems0Files `json:"files,omitempty"`

	// git pull url
	GitPullURL string `json:"git_pull_url,omitempty"`

	// git push url
	GitPushURL string `json:"git_push_url,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// public
	Public bool `json:"public,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// user
	User *GistsItems0User `json:"user,omitempty"`
}

// Validate validates this gists items0
func (m *GistsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFiles(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GistsItems0) validateFiles(formats strfmt.Registry) error {

	if swag.IsZero(m.Files) { // not required
		return nil
	}

	if m.Files != nil {

		if err := m.Files.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *GistsItems0) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {

		if err := m.User.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// GistsItems0Files gists items0 files
// swagger:model GistsItems0Files
type GistsItems0Files struct {

	// ring erl
	RingErl *GistsItems0FilesRingErl `json:"ring.erl,omitempty"`
}

// Validate validates this gists items0 files
func (m *GistsItems0Files) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRingErl(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GistsItems0Files) validateRingErl(formats strfmt.Registry) error {

	if swag.IsZero(m.RingErl) { // not required
		return nil
	}

	if m.RingErl != nil {

		if err := m.RingErl.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// GistsItems0FilesRingErl gists items0 files ring erl
// swagger:model GistsItems0FilesRingErl
type GistsItems0FilesRingErl struct {

	// filename
	Filename string `json:"filename,omitempty"`

	// raw url
	RawURL string `json:"raw_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`
}

// Validate validates this gists items0 files ring erl
func (m *GistsItems0FilesRingErl) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// GistsItems0User gists items0 user
// swagger:model GistsItems0User
type GistsItems0User struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this gists items0 user
func (m *GistsItems0User) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
