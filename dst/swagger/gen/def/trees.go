package def

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Trees trees
// swagger:model trees
type Trees struct {

	// base tree
	BaseTree string `json:"base_tree,omitempty"`

	// SHA1 checksum ID of the object in the tree.
	Sha string `json:"sha,omitempty"`

	// tree
	Tree []*TreesTreeItems0 `json:"tree"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this trees
func (m *Trees) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTree(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Trees) validateTree(formats strfmt.Registry) error {

	if swag.IsZero(m.Tree) { // not required
		return nil
	}

	for i := 0; i < len(m.Tree); i++ {

		if swag.IsZero(m.Tree[i]) { // not required
			continue
		}

		if m.Tree[i] != nil {

			if err := m.Tree[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// TreesTreeItems0 trees tree items0
// swagger:model TreesTreeItems0
type TreesTreeItems0 struct {

	// One of 100644 for file (blob), 100755 for executable (blob), 040000 for subdirectory (tree), 160000 for submodule (commit) or 120000 for a blob that specifies the path of a symlink.
	Mode string `json:"mode,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// SHA1 checksum ID of the object in the tree.
	Sha string `json:"sha,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this trees tree items0
func (m *TreesTreeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var treesTreeItems0TypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["100644","100755","040000","160000","120000"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treesTreeItems0TypeModePropEnum = append(treesTreeItems0TypeModePropEnum, v)
	}
}

const (
	// TreesTreeItems0ModeNr100644 captures enum value "100644"
	TreesTreeItems0ModeNr100644 string = "100644"
	// TreesTreeItems0ModeNr100755 captures enum value "100755"
	TreesTreeItems0ModeNr100755 string = "100755"
	// TreesTreeItems0ModeNr040000 captures enum value "040000"
	TreesTreeItems0ModeNr040000 string = "040000"
	// TreesTreeItems0ModeNr160000 captures enum value "160000"
	TreesTreeItems0ModeNr160000 string = "160000"
	// TreesTreeItems0ModeNr120000 captures enum value "120000"
	TreesTreeItems0ModeNr120000 string = "120000"
)

// prop value enum
func (m *TreesTreeItems0) validateModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, treesTreeItems0TypeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TreesTreeItems0) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}

var treesTreeItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["blob","tree","commit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treesTreeItems0TypeTypePropEnum = append(treesTreeItems0TypeTypePropEnum, v)
	}
}

const (
	// TreesTreeItems0TypeBlob captures enum value "blob"
	TreesTreeItems0TypeBlob string = "blob"
	// TreesTreeItems0TypeTree captures enum value "tree"
	TreesTreeItems0TypeTree string = "tree"
	// TreesTreeItems0TypeCommit captures enum value "commit"
	TreesTreeItems0TypeCommit string = "commit"
)

// prop value enum
func (m *TreesTreeItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, treesTreeItems0TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TreesTreeItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}
