package def

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// SearchCode search code
// swagger:model search-code
type SearchCode struct {

	// items
	Items []*SearchCodeItemsItems0 `json:"items"`

	// total count
	TotalCount int64 `json:"total_count,omitempty"`
}

// Validate validates this search code
func (m *SearchCode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateItems(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchCode) validateItems(formats strfmt.Registry) error {

	if swag.IsZero(m.Items) { // not required
		return nil
	}

	for i := 0; i < len(m.Items); i++ {

		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {

			if err := m.Items[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// SearchCodeItemsItems0 search code items items0
// swagger:model SearchCodeItemsItems0
type SearchCodeItemsItems0 struct {

	// git url
	GitURL string `json:"git_url,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// repository
	Repository *SearchCodeItemsItems0Repository `json:"repository,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// sha
	Sha string `json:"sha,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this search code items items0
func (m *SearchCodeItemsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRepository(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchCodeItemsItems0) validateRepository(formats strfmt.Registry) error {

	if swag.IsZero(m.Repository) { // not required
		return nil
	}

	if m.Repository != nil {

		if err := m.Repository.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// SearchCodeItemsItems0Repository search code items items0 repository
// swagger:model SearchCodeItemsItems0Repository
type SearchCodeItemsItems0Repository struct {

	// archive url
	ArchiveURL string `json:"archive_url,omitempty"`

	// assignees url
	AssigneesURL string `json:"assignees_url,omitempty"`

	// blobs url
	BlobsURL string `json:"blobs_url,omitempty"`

	// branches url
	BranchesURL string `json:"branches_url,omitempty"`

	// collaborators url
	CollaboratorsURL string `json:"collaborators_url,omitempty"`

	// comments url
	CommentsURL string `json:"comments_url,omitempty"`

	// commits url
	CommitsURL string `json:"commits_url,omitempty"`

	// compare url
	CompareURL string `json:"compare_url,omitempty"`

	// contents url
	ContentsURL string `json:"contents_url,omitempty"`

	// contributors url
	ContributorsURL string `json:"contributors_url,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// downloads url
	DownloadsURL string `json:"downloads_url,omitempty"`

	// events url
	EventsURL string `json:"events_url,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks url
	ForksURL string `json:"forks_url,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// git commits url
	GitCommitsURL string `json:"git_commits_url,omitempty"`

	// git refs url
	GitRefsURL string `json:"git_refs_url,omitempty"`

	// git tags url
	GitTagsURL string `json:"git_tags_url,omitempty"`

	// hooks url
	HooksURL string `json:"hooks_url,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// issue comment url
	IssueCommentURL string `json:"issue_comment_url,omitempty"`

	// issue events url
	IssueEventsURL string `json:"issue_events_url,omitempty"`

	// issues url
	IssuesURL string `json:"issues_url,omitempty"`

	// keys url
	KeysURL string `json:"keys_url,omitempty"`

	// labels url
	LabelsURL string `json:"labels_url,omitempty"`

	// languages url
	LanguagesURL string `json:"languages_url,omitempty"`

	// merges url
	MergesURL string `json:"merges_url,omitempty"`

	// milestones url
	MilestonesURL string `json:"milestones_url,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// notifications url
	NotificationsURL string `json:"notifications_url,omitempty"`

	// owner
	Owner *SearchCodeItemsItems0RepositoryOwner `json:"owner,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// pulls url
	PullsURL string `json:"pulls_url,omitempty"`

	// stargazers url
	StargazersURL string `json:"stargazers_url,omitempty"`

	// statuses url
	StatusesURL string `json:"statuses_url,omitempty"`

	// subscribers url
	SubscribersURL string `json:"subscribers_url,omitempty"`

	// subscription url
	SubscriptionURL string `json:"subscription_url,omitempty"`

	// tags url
	TagsURL string `json:"tags_url,omitempty"`

	// teams url
	TeamsURL string `json:"teams_url,omitempty"`

	// trees url
	TreesURL string `json:"trees_url,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this search code items items0 repository
func (m *SearchCodeItemsItems0Repository) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOwner(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchCodeItemsItems0Repository) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {

		if err := m.Owner.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// SearchCodeItemsItems0RepositoryOwner search code items items0 repository owner
// swagger:model SearchCodeItemsItems0RepositoryOwner
type SearchCodeItemsItems0RepositoryOwner struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// events url
	EventsURL string `json:"events_url,omitempty"`

	// followers url
	FollowersURL string `json:"followers_url,omitempty"`

	// following url
	FollowingURL string `json:"following_url,omitempty"`

	// gists url
	GistsURL string `json:"gists_url,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// organizations url
	OrganizationsURL string `json:"organizations_url,omitempty"`

	// received events url
	ReceivedEventsURL string `json:"received_events_url,omitempty"`

	// repos url
	ReposURL string `json:"repos_url,omitempty"`

	// starred url
	StarredURL string `json:"starred_url,omitempty"`

	// subscriptions url
	SubscriptionsURL string `json:"subscriptions_url,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this search code items items0 repository owner
func (m *SearchCodeItemsItems0RepositoryOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
