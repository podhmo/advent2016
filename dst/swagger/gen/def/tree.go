package def

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// Tree tree
// swagger:model tree
type Tree struct {

	// sha
	Sha string `json:"sha,omitempty"`

	// tree
	Tree []*TreeItems0 `json:"tree"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this tree
func (m *Tree) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTree(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Tree) validateTree(formats strfmt.Registry) error {

	if swag.IsZero(m.Tree) { // not required
		return nil
	}

	for i := 0; i < len(m.Tree); i++ {

		if swag.IsZero(m.Tree[i]) { // not required
			continue
		}

		if m.Tree[i] != nil {

			if err := m.Tree[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// TreeItems0 tree items0
// swagger:model TreeItems0
type TreeItems0 struct {

	// mode
	Mode string `json:"mode,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// sha
	Sha string `json:"sha,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this tree items0
func (m *TreeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
