package def

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// User user
// swagger:model user
type User struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// bio
	Bio string `json:"bio,omitempty"`

	// blog
	Blog string `json:"blog,omitempty"`

	// collaborators
	Collaborators int64 `json:"collaborators,omitempty"`

	// company
	Company string `json:"company,omitempty"`

	// ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
	CreatedAt string `json:"created_at,omitempty"`

	// disk usage
	DiskUsage int64 `json:"disk_usage,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// followers
	Followers int64 `json:"followers,omitempty"`

	// following
	Following int64 `json:"following,omitempty"`

	// gravatar id
	GravatarID string `json:"gravatar_id,omitempty"`

	// hireable
	Hireable bool `json:"hireable,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// location
	Location string `json:"location,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// owned private repos
	OwnedPrivateRepos int64 `json:"owned_private_repos,omitempty"`

	// plan
	Plan *UserPlan `json:"plan,omitempty"`

	// private gists
	PrivateGists int64 `json:"private_gists,omitempty"`

	// public gists
	PublicGists int64 `json:"public_gists,omitempty"`

	// public repos
	PublicRepos int64 `json:"public_repos,omitempty"`

	// total private repos
	TotalPrivateRepos int64 `json:"total_private_repos,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePlan(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validatePlan(formats strfmt.Registry) error {

	if swag.IsZero(m.Plan) { // not required
		return nil
	}

	if m.Plan != nil {

		if err := m.Plan.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// UserPlan user plan
// swagger:model UserPlan
type UserPlan struct {

	// collaborators
	Collaborators int64 `json:"collaborators,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// private repos
	PrivateRepos int64 `json:"private_repos,omitempty"`

	// space
	Space int64 `json:"space,omitempty"`
}

// Validate validates this user plan
func (m *UserPlan) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
